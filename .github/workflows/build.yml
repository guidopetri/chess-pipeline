name: Build Docker image

on:
  push:
    branches: ['master', 'dev']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  build-dev-image:
    runs-on: ubuntu-latest
    env:
      LUIGI_ENV: ${{ secrets.E2E_TESTS_LUIGI_ENV }}
      POSTGRES_ENV: ${{ secrets.E2E_TESTS_POSTGRES_ENV }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build amd64 Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: INSTALL_GROUPS="main,dev"
          tags: ${{ env.REPO_NAME }}
          cache-from: type=gha
          outputs: type=docker,dest=/tmp/${{ env.REPO_NAME }}_dev.tar
      - name: Upload dev image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_NAME }}_dev
          path: /tmp/${{ env.REPO_NAME }}_dev.tar
  run-pytest:
    runs-on: ubuntu-latest
    needs: build-dev-image
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.REPO_NAME }}_dev
          path: /tmp
      - name: Load image into Docker
        run: |
          docker load --input /tmp/${{ env.REPO_NAME }}_dev.tar
          docker image ls -a
      - name: Run pytest command
        run: make ci-pytest
  run-pyright:
    runs-on: ubuntu-latest
    needs: build-dev-image
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.REPO_NAME }}_dev
          path: /tmp
      - name: Load image into Docker
        run: |
          docker load --input /tmp/${{ env.REPO_NAME }}_dev.tar
          docker image ls -a
      - name: Run pyright command
        run: make ci-pyright
  build-e2e-test-and-push-image:
    runs-on: ubuntu-latest
    needs:
      - run-pytest
      - run-pyright
    env:
      LUIGI_ENV: ${{ secrets.E2E_TESTS_LUIGI_ENV }}
      POSTGRES_ENV: ${{ secrets.E2E_TESTS_POSTGRES_ENV }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build amd64 Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ github.event.repository.name }}
          cache-from: type=gha
      - name: Run e2e test
        run: |
          echo "$LUIGI_ENV" > .luigi_env
          echo "$POSTGRES_ENV" > .postgres_env
          make ci-e2e-test
      - name: Build arm64 Docker image and push amd64/arm64 images to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
