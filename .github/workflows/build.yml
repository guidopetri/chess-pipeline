name: Build Docker image

on:
  push:
    branches: ['master', 'dev', 'cloud-fn']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REPO_NAME: ${{ github.event.repository.name }}
  SCW_REGION: fr-par
  SCW_FUNCTION_DEPLOY_TIMEOUT: 120

jobs:
  build-dev-image:
    runs-on: ubuntu-latest
    env:
      LUIGI_ENV: ${{ secrets.E2E_TESTS_LUIGI_ENV }}
      POSTGRES_ENV: ${{ secrets.E2E_TESTS_POSTGRES_ENV }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build amd64 Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: INSTALL_GROUPS=main,dev
          tags: ${{ env.REPO_NAME }}-dev
          cache-from: type=gha
          outputs: type=docker,dest=/tmp/${{ env.REPO_NAME }}_dev.tar
      - name: Upload dev image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_NAME }}_dev
          path: /tmp/${{ env.REPO_NAME }}_dev.tar
  run-pytest:
    runs-on: ubuntu-latest
    needs: build-dev-image
    env:
      LUIGI_ENV: ${{ secrets.E2E_TESTS_LUIGI_ENV }}
      POSTGRES_ENV: ${{ secrets.E2E_TESTS_POSTGRES_ENV }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.REPO_NAME }}_dev
          path: /tmp
      - name: Load image into Docker
        run: |
          docker load --input /tmp/${{ env.REPO_NAME }}_dev.tar
          docker image ls -a
      - name: Run pytest command
        run: |
          echo "$LUIGI_ENV" > .luigi_env
          echo "$POSTGRES_ENV" > .postgres_env
          make ci-pytest
  run-pyright:
    runs-on: ubuntu-latest
    env:
      LUIGI_ENV: ${{ secrets.E2E_TESTS_LUIGI_ENV }}
      POSTGRES_ENV: ${{ secrets.E2E_TESTS_POSTGRES_ENV }}
    needs: build-dev-image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.REPO_NAME }}_dev
          path: /tmp
      - name: Load image into Docker
        run: |
          docker load --input /tmp/${{ env.REPO_NAME }}_dev.tar
          docker image ls -a
      - name: Run pyright command
        run: |
          echo "$LUIGI_ENV" > .luigi_env
          echo "$POSTGRES_ENV" > .postgres_env
          make ci-pyright
  build-cloud-function:
    runs-on: ubuntu-latest
    needs: build-dev-image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.REPO_NAME }}_dev
          path: /tmp
      - name: Load image into Docker
        run: |
          docker load --input /tmp/${{ env.REPO_NAME }}_dev.tar
          docker image ls -a
      - name: Build serverless function zip
        run: |
          make ci-build-serverless-function
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cloud_function_zip
          path: ./cloud_function.zip
  update-cloud-function:
    runs-on: ubuntu-latest
    env:
      SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
      SCW_FUNCTION_ID: ${{ secrets.SCW_FUNCTION_ID }}
    needs:
      - run-pytest
      - run-pyright
      - build-cloud-function
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: cloud_function_zip
          path: /tmp
      - name: Upload function zip
        run: |
          ARCHIVE_SIZE=$(stat -c %s /tmp/cloud_function.zip)

          PRESIGNED_URL=$(curl -X GET -H "X-Auth-Token: $SCW_SECRET_KEY" \
          "https://api.scaleway.com/functions/v1beta1/regions/${{ env.SCW_REGION }}/functions/$SCW_FUNCTION_ID/upload-url?content_length=$ARCHIVE_SIZE" | jq --raw-output ."url")

          curl -H "Content-Type: application/octet-stream" \
            --upload-file /tmp/cloud_function.zip \
            -H "Content-Length: $ARCHIVE_SIZE" \
            $PRESIGNED_URL
      - name: Deploy function
        run: |
          curl -X POST \
            -H "X-Auth-Token: $SCW_SECRET_KEY" \
            -H "Content-Type: application/json" \
            -d '{}' \
            "https://api.scaleway.com/functions/v1beta1/regions/${{ env.SCW_REGION }}/functions/$SCW_FUNCTION_ID/deploy" > /dev/null
      - name: Check function status and wait until ready
        run: |
          LOOP_START=$EPOCHSECONDS
          while :
          do
            FUNCTION_STATUS=$(curl --silent -X GET \
              -H "X-Auth-Token: $SCW_SECRET_KEY" \
              "https://api.scaleway.com/functions/v1beta1/regions/${{ env.SCW_REGION }}/functions/$SCW_FUNCTION_ID" | jq .status)
            echo $FUNCTION_STATUS
            if [[ "$FUNCTION_STATUS" == '"ready"' ]]; then
              echo "Function has "ready" status and seems to be deployed successfully."
              exit 0
            fi

            # exit with failure if timeout
            if (( EPOCHSECONDS - LOOP_START > $SCW_FUNCTION_DEPLOY_TIMEOUT )); then
              echo "Timed out while deploying function"
              exit 1
            fi

            sleep 10
          done
  build-e2e-test-and-push-image:
    runs-on: ubuntu-latest
    needs:
      - run-pytest
      - run-pyright
    env:
      LUIGI_ENV: ${{ secrets.E2E_TESTS_LUIGI_ENV }}
      POSTGRES_ENV: ${{ secrets.E2E_TESTS_POSTGRES_ENV }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build amd64 Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ github.event.repository.name }}
          cache-from: type=gha
      # - name: Run e2e test
      #   run: |
      #     echo "$LUIGI_ENV" > .luigi_env
      #     echo "$POSTGRES_ENV" > .postgres_env
      #     make ci-e2e-test
      - name: Build arm64 Docker image and push amd64/arm64 images to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
